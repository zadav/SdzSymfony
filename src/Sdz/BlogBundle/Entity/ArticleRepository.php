<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function myFindAll()
    {
    $queryBuilder = $this->createQueryBuilder('a');

    // Méthode équivalente, mais plus longue :
    $queryBuilder = $this->_em->createQueryBuilder()
                              ->select('a')
                              ->from($this->_entityName, 'a');
      // Dans un repository, $this->_entityName est le namespace de l'entité gérée
      // Ici, il vaut donc Sdz\BlogBundle\Entity\Article

    // On a fini de construire notre requête

    // On récupère la Query à partir du QueryBuilder
    $query = $queryBuilder->getQuery();

    // On récupère les résultats à partir de la Query
    $resultats = $query->getResult();

    // On retourne ces résultats
    return $resultats;
    }
    
    public function myFindOne($id)
    {
      // On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
      $qb = $this->_em->createQueryBuilder();

      $qb->select('a')
         ->from('SdzBlogBundle:Article', 'a')
         ->where('a.id = :id')
         ->setParameter('id', $id);

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function findByAuteurAndDate($auteur, $annee)
    {
      // On utilise le QueryBuilder créé par le repository directement pour gagner du temps
      // Plus besoin de faire le select() ni le from() par la suite donc
      $qb = $this->createQueryBuilder('a');

      $qb->where('a.auteur = :auteur')
          ->setParameter('auteur', $auteur)
         ->andWhere('a.date < :annee')
          ->setParameter('annee', $annee)
         ->orderBy('a.date', 'DESC');

      return $qb->getQuery()
                ->getResult();
    }

    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
      $qb->andWhere('a.date BETWEEN :debut AND :fin')
          ->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
          ->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année

        return $qb;
    }
    
    public function myFindAllDQL()
    {
      $query = $this->_em->createQuery('SELECT a FROM SdzBlogBundle:Article a');
      $resultats = $query->getResult();

      return $resultats;
    }

    public function getArticleAvecCommentaires()
    {
      $qb = $this->createQueryBuilder('a')
                 ->leftJoin('a.commentaires', 'c')
                 ->addSelect('c');

      return $qb->getQuery()
                ->getResult();
    }
    
    public function getAvecCategories(array $nom_categories)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Categorie, avec pour alias « c »
        $qb ->join('a.categories', 'c')
            ->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN

        // Enfin, on retourne le résultat
        return $qb->getQuery()
                  ->getResult();
    }

    public function getArticles($nombreParPage, $page)
    {
      $query = $this->createQueryBuilder('a')
                     // On joint sur l'attribut image
                    ->leftJoin('a.image', 'i')
                      ->addSelect('i')
                    // On joint sur l'attribut categories
                    ->leftJoin('a.categories', 'c')
                      ->addSelect('c')
                    ->orderBy('a.date', 'DESC')
                    ->getQuery();
      
      $query->setFirstResult(($page-1) * $nombreParPage)
            ->setMaxResults($nombreParPage);
        

      return new Paginator($query);
    }

}
